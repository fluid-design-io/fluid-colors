'use client'

import { useColorStore } from '@/context/color-store-provider'
import useCopyText from '@/hooks/use-copy-text'
import generateFigmaUrlToken from '@/lib/code-gen/generate-figma-url-token'
import { CodeButtonTitle, CodeGenerateType, generateCssVariables } from '@/lib/generateVariables'
import { useToolStore } from '@/store/toolStore'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@ui/components/dialog'
import { Button } from '@ui/components/ui/button'
import { Copy, CopyCheck } from 'lucide-react'
import { useState } from 'react'

const copyDescription = (title: CodeButtonTitle) => {
  switch (title) {
    case CodeButtonTitle.RAW:
      return 'Copy and paste this code in your CSS file'
    case CodeButtonTitle.TAILWINDCSS:
      return 'Copy and paste this code in your tailwind.config.js file'
    case CodeButtonTitle.SHADCN:
      return 'Copy and paste this code in your global.css file'
    case CodeButtonTitle.REACT_NATIVE_PAPER:
      return 'Copy and paste this code in your theme.js file'
    case CodeButtonTitle.FIGMA:
      return 'Copy and paste this url in Figma plugin, the link is valid for 7 days'
    default:
      return 'Copy and paste this code in your CSS file'
  }
}
function CodeGenerateButton({
  available,
  title,
  type,
}: {
  available: boolean
  title: CodeButtonTitle
  type: CodeGenerateType
}) {
  const { colorPalettes, baseColors } = useColorStore((s) => s.colors)
  const { colorMode } = useToolStore()
  const [code, setCode] = useState<string>('')
  const { copyText, isCopied } = useCopyText()
  const generate = async () => {
    if (title === CodeButtonTitle.FIGMA) {
      const c = await generateFigmaUrlToken(baseColors)
      setCode(c)
    } else {
      const c = generateCssVariables({
        colorMode,
        colorPalettes,
        title,
      })
      setCode(c)
    }
  }
  return (
    <Dialog>
      <DialogTrigger asChild>
        {available ? (
          <Button className="relative z-10 backdrop-blur-sm" onClick={generate} size="sm" variant="outline">
            Generate
          </Button>
        ) : (
          <Button
            className="relative z-10 text-foreground/50 !opacity-100 backdrop-blur-sm"
            disabled
            size="sm"
            variant="outline"
          >
            Coming Soon
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="block max-h-[min(60rem,calc(100dvh-2rem))] overflow-y-auto overflow-x-hidden sm:max-w-2xl">
        <DialogHeader>
          <DialogTitle>{title}</DialogTitle>
          <DialogDescription>{copyDescription(title)}</DialogDescription>
        </DialogHeader>
        <div className="relative mb-4 py-4">
          <Button
            className="absolute right-3 top-7 z-20"
            disabled={isCopied}
            onClick={() => copyText(code)}
            size="icon"
            variant="outline"
          >
            {isCopied ? <CopyCheck className="h-5 w-5" /> : <Copy className="h-5 w-5" />}
          </Button>
          <pre className="max-h-[min(60rem,calc(100dvh-20rem))] max-w-full overflow-auto rounded-lg border bg-zinc-950 dark:bg-zinc-900">
            <code
              className="relative min-h-[4rem] rounded bg-muted px-[0.3rem] py-[0.2rem] font-mono text-sm"
              style={{
                WebkitBoxDecorationBreak: 'clone',
                backgroundColor: 'transparent',
                borderRadius: 0,
                borderWidth: 0,
                boxDecorationBreak: 'clone',
                counterReset: 'line',
                display: 'grid',
                minWidth: '100%',
                overflowWrap: 'break-word',
                padding: 0,
              }}
            >
              {!code && (
                <span className="inline-block min-h-[1rem] w-full px-4 py-[0.125rem] text-muted-foreground dark:text-foreground">
                  Generating...
                </span>
              )}
              {/* make it a span */}
              {code?.split('\n').map((line, index) => (
                <span
                  className="inline-block min-h-[1rem] w-full px-4 py-[0.125rem] text-background dark:text-foreground"
                  key={`line-${index}`}
                >
                  {line}
                </span>
              ))}
            </code>
          </pre>
        </div>
        <p className="text-xs text-muted-foreground">Generated by Fluid Colors</p>
        <DialogFooter>
          <Button className="w-28" disabled={isCopied} onClick={() => copyText(code)} type="button">
            {isCopied ? 'Copied!' : 'Copy Code'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  )
}

export default CodeGenerateButton
